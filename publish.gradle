apply plugin: 'maven'
apply plugin: 'signing'

def isLocalBuild() {
    return hasProperty("LOCAL")
}

def isReleaseBuild() {
    return hasProperty("RELEASE")
}

def isSnapshotBuild() {
    return hasProperty("SNAPSHOT")
}

def getLocalRepositoryUrl() {
    return hasProperty('LOCAL_REPOSITORY_URL') ? LOCAL_REPOSITORY_URL
            : 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getGroupId() {
    return GROUPID;
}

def getArtifactId() {
    return ARTIFACTID;
}

def getVersion() {
    if (isReleaseBuild()) {
        return VERSION.replace("-SNAPSHOT", "")
    } else {
        return VERSION;
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = getGroupId()
                pom.version = getVersion()
                pom.artifactId = getArtifactId()


                if (isLocalBuild()) {
                    repository(url: getLocalRepositoryUrl())
                } else {
                    if (isReleaseBuild()) {
                        repository(url: getReleaseRepositoryUrl()) {
                            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                        }
                    }
                    if (isSnapshotBuild()) {
                        snapshotRepository(url: getSnapshotRepositoryUrl()) {
                            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                        }
                    }
                }




                pom.project {
                    name 'gdx-gameanalytics'
                    description 'Gameanalytics.com client implementation for libGDX'
                    url 'https://github.com/TomGrill/gdx-gameanalytics'

                    scm {
                        url 'scm:git@github.com:TomGrill/my-gdx-extension.git'
                        connection 'scm:git@github.com:TomGrill/my-gdx-extension.git'
                        developerConnection 'scm:git@github.com:TomGrill/my-gdx-extension.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'MrStahlfelge'
                            name 'Benjamin Schulte'
                            email 'lightblocks@golfgl.de'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task libraryJar(type: Jar, dependsOn:classes) {
        from sourceSets.main.output.classesDirs
        from configurations.custom.collect { it.isDirectory() ? it : zipTree(it) }
        archiveClassifier = 'library'
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        from javadoc.destinationDir
        archiveClassifier = 'javadoc'
    }

    artifacts {
        archives libraryJar
        archives sourcesJar
        archives javadocJar
    }

}
